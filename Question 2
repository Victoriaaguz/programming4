// All 4 directions : right, left, down, up
// (0, 1), (0, -1), (1, 0), (-1, 0)

int dx[4] = {0,  0, 1, -1}; //creation of our 4x4 grid
int dy[4] = {1, -1, 0,  0};
//bool that tests/compares four ints and whether x is greater than or equal to 0 AND x is less than n AND y is greater than or 
//equal to 0 AND y is less than m; all must be true for bool to be true
bool isValid(int x, int y, int n, int m) { 
    if(x >= 0 && x < n && y >= 0 && y < m) return true;
    return false;
}
//bfs implementation of our four ints using a queue pair with the push method.
void bfs(int x, int y, int n, int m, vector<vector<int>> &dist, vector<vector<int>> &grid) {

    queue<pair<int, int>> q;

    q.push({x, y});
 //while queue is empty set values to false.
    while(q.empty() == false) {
        //while false set pair to front of queue and pop.
        pair<int, int> temp = q.front();
        q.pop();
        //set x1 and y1 to temp values first and second respectively.
        int x1 = temp.first;
        int y1 = temp.second;
        //for statement
        for(int i=0; i<4; i++) {
          //creation and setting of values for wX and wY as the temporary x,y value from earlier in the while loop 
          //(line24-25).
            int wX = temp.first + dx[i];
            int wY = temp.second + dy[i];
          //if our four ints are valid set value to true.
            if(isValid(wX, wY, n, m) == true) {
               //if i + 1 is equal to the grid x,y and distance x,y  is less than our temp wX,wY then set distance of wX and wY
               // equal to the distance of x,y, then push.
                if(i + 1 == grid[x1][y1] && dist[x1][y1] < dist[wX][wY]) {
                    dist[wX][wY] = dist[x1][y1];
                    q.push({wX, wY});
                }
                //else if the distance x,y + 1 is less than the distance wX,wY then set the distance of wX,wY to the distance
                //x,y + 1, then push.
                else if(dist[x1][y1] + 1 < dist[wX][wY]) {
                    dist[wX][wY] = dist[x1][y1] + 1;
                    q.push({wX, wY});
                }
            }
        }
    }
    //return statement
    return;
}
//minimum cost function
int minCost(vector<vector<int>>& grid) {
//int n equal to grid size and int m is equal to the amount of grids
    int n = grid.size();
    int m = grid[0].size();
    //return 0 statement
    if(n == 0)                                                  return 0;
    //implementation of of bfs and grids taking in our vectors and ints from earlier.
    vector<vector<int>> dist(n, vector<int>(m, INT_MAX));

    dist[0][0] = 0;

    bfs(0, 0, n, m, dist, grid);
    //return distance n-1 * m-1
    return dist[n-1][m-1];
